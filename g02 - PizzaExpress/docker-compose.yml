services:
  postgres:
    image: postgres:16
    container_name: pizza-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: pizza_order # base por defecto
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/00-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks: [pizza]

  order-service:
    build:
      context: .
      dockerfile: order-service/Dockerfile   # <-- Dockerfile del módulo
    image: pizza/order-service
    container_name: order-service
    environment:
      # Spring Datasource (usa la base creada arriba)
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/pizza_order
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      # Opcional JPA/Hibernate para dev:
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      # Actuator management (por si lo querés distinto)
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info
      SERVER_PORT: 8081
      APP_URL: http://order-service:8081
    ports:
      - "8081:8081"   # publicar para probar directo
    expose:
      - "8081"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8081/actuator/health | grep -q 'UP'"]
      interval: 10s
      timeout: 3s
      retries: 10
    networks: [pizza]

  gateway:
    build:
      context: .
      dockerfile: gateway/Dockerfile
    image: pizza/gateway
    container_name: gateway
    ports: ["8080:8080"]
    depends_on:
      order-service:
        condition: service_healthy
    networks: [pizza]

networks:
  pizza:

volumes:
  pgdata:
